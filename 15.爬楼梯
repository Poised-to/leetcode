假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

class Solution {
    public int climbStairs(int n) {
    //     //用来计数
    //    int count = 0;
    //    //定义两个指针
    //    int fast = 0;
    //    int slow = 0;
    //    int m=0;
    //     for(int i=0;i<n;i++){
    //         if(m<n){
    //          m = (fast+=2) || (slow+=1);
    //           count++;
    //         }
    //     }
    //     return count;

    /*以下是大佬的解法加上自己的理解
    第0阶楼梯：1中走法
    第1阶楼梯：1中走法
    第2阶楼梯：2中走法
    第3阶楼梯：3中走法
    第4阶楼梯：5中走法
    可以找到规律：第n阶的走法是第n-1阶加上n-2阶的走法
    */

    //首先定义一个数组，因为数组是从0开始计数，所以数组长度应该为n+1
    int[] dn = new int[n+1];
        dn[0] = 1;
        dn[1] = 1;
        for(int i = 2; i<=n; i++){  //因为从0索引开始，所以i可以走到n的位置
            dn[i] = dn[i-1] + dn[i-2];
        }
        return dn[n];
    }
}
