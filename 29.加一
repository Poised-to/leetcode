给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。
最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
你可以假设除了整数 0 之外，这个整数不会以零开头。

class Solution {
    public int[] plusOne(int[] digits) {
    for (int i = digits.length - 1; i >= 0; i--) {
            //当最后一个数字进来时，会先判断是否为9，如果是将9变为0
            if (digits[i] == 9) {
                digits[i] = 0;
            // 如果不是，直接将+1。还有种情况：第后面一个数字已经+1，到这里不是就+1进位
            } else {
                digits[i] += 1;
                // 当走到这里，已经+1结束，直接返回
                return digits;
            }

        }
        //如果前面没有返回，证明每一位都是9，所以需要将数组扩容(9999->10000)
        digits= new int[digits.length + 1];
        digits[0] = 1;
        return digits;
   
   
    /*    //在我理解，这一题的意思就是给数组最后一个元素的大小+1
        //但是最后一位数字可能是9所以不能相成简单的遍历
        //这样就知道，这个数字是几位数
        int n = digits.length;
        int j=0;
        for(int i=n-1;i>=0;i--){
            //个位上的数字
            if(i==n-1){
                j+=digits[i];
            }else{
                //其他位置上的数字
                j+=digits[i]*10*(n-i-1);
            }
        }
        //循环结束之后，数组中的数字已经遍历给了j，现在让j+1
        j+=1;
        // 定义一个数字，用来存储j的长度
        int m = (j+"").length();
        String str = j+"";

        //定义一个新数组，用来存储j数字所遍历到的数组
        String[] arr = str.split("");
       int[] arr2 = new int[m];
       for(int i=0;i<arr.length;i++){
           arr2[i] = Integer.parseInt(arr[i]);
       }
        return arr2;
        */
    }
}
