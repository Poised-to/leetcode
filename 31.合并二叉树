给你两棵二叉树： root1 和 root2 。

想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，不为 null 的节点将直接作为新二叉树的节点。

返回合并后的二叉树。

注意: 合并过程必须从两个树的根节点开始。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        //递归时，只要两棵树有一颗书的对应结点为空，直接返回另一颗树
        if(root1 == null){
            return root2;
        }
        if(root2 == null){
            return root1;
        }
        //定义一个新的树，只有当两个对应结点都不为空才能走到这里
        TreeNode tempNode = new TreeNode(root1.val+root2.val);
        //递归调用左子结点
        tempNode.left = mergeTrees(root1.left,root2.left);
        // 递归调用右子结点
        tempNode.right = mergeTrees(root1.right,root2.right);
        return tempNode;
    }
}
