nums1 中数字 x 的 下一个更大元素 是指 x 在 nums2 中对应位置 右侧 的 第一个 比 x 大的元素。

给你两个 没有重复元素 的数组 nums1 和 nums2 ，下标从 0 开始计数，其中nums1 是 nums2 的子集。

对于每个 0 <= i < nums1.length ，找出满足 nums1[i] == nums2[j] 的下标 j ，并且在 nums2 确定 nums2[j] 的 下一个更大元素 。如果不存在下一个更大元素，那么本次查询的答案是 -1 。

返回一个长度为 nums1.length 的数组 ans 作为答案，满足 ans[i] 是如上所述的 下一个更大元素 。


class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
    /*    //先新建一个数组，用来存储元素和返回
        int[] arr = new int[nums1.length];
        //双层for循环
        for(int i=0; i<nums1.length; i++){
            for(int j=i; j<nums2.length; j++){
                if(nums1[i] < nums2[j]){
                    arr[i] = nums2[j];
                }else{
                    arr[i] = -1;
                }
            }
        }
        return arr;
        */
        //创建新数组，用于返回和保存数据，这个数组的长度与nums1长度相同
        int[] arr = new int[nums1.length];
        //遍历nums1
        for(int i=0; i<nums1.length; i++){
            int j=0;
            //遍历nums2，并判断是否有元素与nums1中的元素
            while(j<nums2.length && nums2[j] != nums1[i]){
                //如果不相等j++;
                j++;
            }
            int k=j+1;
            while(k<nums2.length && nums2[k]<nums2[j]){
                k++;
            }
            if(k<nums2.length){
                arr[i] = nums2[k];
            }else{
                arr[i] = -1;
            }
        }
        return arr;
    }
}
