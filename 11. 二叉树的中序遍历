/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        //定义一个数组，用来存储获得的元素
        List<Integer> res = new ArrayList<>();
        //调用下面方法
        inorder(root, res);
        return res;
    }

    //重写一个方法，用来左递归操作
    //这个方法通过不停的递归，将把（指针）直接方法树的最下方
    private void inorder(TreeNode root, List<Integer> res){
        if(root == null){
            return;
        }
        //递归调用inorder先往左子树遍历
        inorder(root.left, res);
        //这一步是王集合中添加数据的，所以用root.val
        res.add(root.val);
        //之后遍历右子树
        inorder(root.right, res);
    }
}
