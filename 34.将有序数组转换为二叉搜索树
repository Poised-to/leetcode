给你一个整数数组 nums ，其中元素已经按 升序 排列，请你将其转换为一棵 高度平衡 二叉搜索树。

高度平衡 二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
    /*    //定义一个空树，用来接收数据
        TreeNode root = null;
        dfs(root,nums);
        return root;
    }
    //定义一个方法，用来递归
    public void dfs(TreeNode root, int[] nums){
      for(int i=0; i<nums.length; i++){
            if(arr == null){
                return;
            }
            if(i=0){
                root = arr[i];
            }
            if(root.left ==null){
                root.left = arr[i];
            }
            if(root.right == null){
                root.right = arr[i];
            }
        }
        dfs(root.left);
        dfs(root.right);
        */

以上为自己尝试写的代码，但是失败了
----------------------------------------------------------------------------
以下为有效代码

class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        //调用递归方法，直接返回
        return dfs(nums,0,nums.length-1);
    }
        //定义一个递归方法
        public TreeNode dfs(int[] nums,int left,int right){
            //这时证明数组的长度为0
            if(left > right){
                return null;
            }
            //定义一个结点，
            //如果数组为奇数获取中间的数字，如果数组为偶数，获取中间左边的数据
            int mid = (left+right)/2;
            TreeNode root = new TreeNode(nums[mid]);
            //下面递归调用
            //mid左边的数据会重新运算得到中间数据，知道数据全部被拿到
            //这样做也不会使数的高度差距大于1
            root.left = dfs(nums, left, mid-1);
            root.right = dfs(nums, mid+1, right);
            return root;
        
    }
}
